- name: Créer un utilisateur nommé replicator
  become_user: postgres
  become: yes
  postgresql_user:
    db: postgres
    name: replicator
    password: "{{ replicator_password }}"
    role_attr_flags: replication
    state: present

- name: Accorder les droits à l’utilisateur replicator
  become_user: postgres
  become: yes
  postgresql_privs:
    db: postgres
    privs: all
    type: database
    roles: replicator
    state: present

- name: Obtenir le fichier de configuration hba_file
  become_user: postgres
  become: yes
  command: psql -c "SHOW hba_file" -t
  register: hba_file

- name: Afficher la variable
  debug:
    var: hba_file

- name: Accorder le droit de connexion à l’utilisateur replicator via le module postgresql_pg_hba.
  become_user: postgres
  become: yes
  postgresql_pg_hba:
    dest: "{{ hba_file.stdout | trim }}"
    contype: host
    address: all
    method: md5
    state: present
  notify: Redémarrer le service postgresql

- name: Accorder l’accès au nœud distant via le module postgresql_pg_hba.
  become_user: postgres
  become: yes
  postgresql_pg_hba:
    dest: "{{ hba_file.stdout | trim }}"
    contype: host
    databases: replication
    address: "{{ postgresql_standby_ip if postgresql_mode == 'primary' else postgresql_primary_ip }}"
    method: md5
    state: present
  notify: Redémarrer le service postgresql

- name: Configurer le fichier postgresql.conf
  become_user: postgres
  become: yes
  postgresql_set:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
  loop:
    - name: listen_addresses
      value: "0.0.0.0"
    - name: wal_level
      value: replica
    - name: max_wal_senders
      value: "10"
    - name: hot_standby
      value: on
  when: postgresql_mode == "standby"
  notify: Redémarrer le service postgresql

- name: Create .pgpass file
  template:
    src: pgpass.j2
    dest: /tmp/.pgpass
    owner: postgres
    group: postgres
    mode: "0600"
  become: yes
  when: postgresql_mode == "standby"

- name: Obtenir le répertoire de données
  become_user: postgres
  become: yes
  command: psql -c "SHOW data_directory"
  register: data_directory
  when: postgresql_mode == "standby"

- name: Afficher le répertoire de données
  debug:
    var: data_directory
  when: postgresql_mode == "standby"

- name: Arreter le service postgresql
  service:
    name: postgresql@15-main
    state: stopped
  become: yes
  when: postgresql_mode == "standby"

- name: Supprimer le répertoire de données
  become: yes
  file:
    path: "{{ data_directory.stdout_lines[2] | trim }}"
    state: absent
  when: postgresql_mode == "standby"

- name: Créer un répertoire vide au même chemin avec comme utilisateur et groupe postgres et droits 0700.
  become: yes
  file:
    path: "{{ data_directory.stdout_lines[2] | trim }}"
    state: directory
    owner: postgres
    group: postgres
    mode: "0700"
  when: postgresql_mode == "standby"

- name: Démarrer la réplication
  become: yes
  become_user: postgres
  environment:
    PGPASSFILE: "/tmp/.pgpass"
  command: pg_basebackup -h "{{ postgresql_primary_ip }}" -U replicator -p 5432 -D "{{ data_directory.stdout_lines[2] | trim }}" -X stream
  when: postgresql_mode == "standby"

- name: Supprimer le fichier /tmp/.pgpass pour ne pas le laisser trainer
  become: yes
  file:
    path: /tmp/.pgpass
    state: absent
  when: postgresql_mode == "standby"

- name: Modifer la configuration de postgresql.conf pour la réplication
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/15/main/postgresql.conf"
    regexp: "^#primary_conninfo.*"
    line: "#primary_conninfo = 'host={{ postgresql_primary_ip }} port=5432 user=replicator password={{ replicator_password }}'"
  when: postgresql_mode == "standby"
  become: yes

- name: Redémarrer le service postgresql
  service:
    name: postgresql@15-main
    state: restarted
  become: yes
  when: postgresql_mode == "standby"
